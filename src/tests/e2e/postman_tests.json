{
	"info": {
		"_postman_id": "40a5eb94-671b-40f7-b9ab-84363d14e7f8",
		"name": "Betwise Line Provides Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27494593"
	},
	"item": [
		{
			"name": "Event",
			"item": [
				{
					"name": "/v1/event 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"token\",",
									"        \"administrator_token\",",
									"        \"name\",",
									"        \"description\",",
									"        \"coefficient\",",
									"        \"expiration_at\",",
									"        \"status\",",
									"        \"created_at\",",
									"        \"status_updated_at\"",
									")",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",    ",
									"    \"required\": [",
									"        \"token\",",
									"        \"administrator_token\",",
									"        \"name\",",
									"        \"description\",",
									"        \"coefficient\",",
									"        \"expiration_at\",",
									"        \"status\",",
									"        \"created_at\",",
									"        \"status_updated_at\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'user_token',",
									"\t'roles': ['ADMIN'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"tets name\",\n    \"description\": \"test desc\",\n    \"coefficient\": 1.3,\n    \"timeline\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/event",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/event 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'user_token',",
									"\t'roles': ['USER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"tets name\",\n    \"description\": \"test desc\",\n    \"coefficient\": 1.3,\n    \"timeline\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/event",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/event 422 Unpocessable entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 422 = Unprocessable Entity",
									" */",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test object keys\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"detail\");",
									"    v = jsonData.detail[0]",
									"    pm.expect(v).to.have.property(\"loc\");",
									"    pm.expect(v).to.have.property(\"msg\");",
									"    pm.expect(v).to.have.property(\"type\");",
									"});",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    v = jsonData.detail[0]",
									"    pm.expect(v.msg).to.a(\"string\");",
									"    pm.expect(v.msg).to.eql(\"Input should be a valid number, unable to parse string as a number\");",
									"});",
									"/**",
									" * ajv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"properties\": {",
									"                    \"loc\": {",
									"                        \"type\": \"array\"",
									"                    },",
									"                    \"msg\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"url\": {",
									"                        \"type\": \"string\"",
									"                    }",
									"                },",
									"                \"required\": [",
									"                    \"loc\",",
									"                    \"msg\",",
									"                    \"type\",",
									"                    \"input\",",
									"                    \"url\"",
									"                ],",
									"                \"additionalProperties\": true",
									"            } ",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'user_token',",
									"\t'roles': ['ADMIN'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"tets name\",\n    \"description\": \"test desc\",\n    \"coefficient\": \"invalid\",\n    \"timeline\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/event",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/event/{event_token} 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"token\",",
									"        \"administrator_token\",",
									"        \"name\",",
									"        \"description\",",
									"        \"coefficient\",",
									"        \"expiration_at\",",
									"        \"status\",",
									"        \"created_at\",",
									"        \"status_updated_at\"",
									")",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",    ",
									"    \"required\": [",
									"        \"token\",",
									"        \"administrator_token\",",
									"        \"name\",",
									"        \"description\",",
									"        \"coefficient\",",
									"        \"expiration_at\",",
									"        \"status\",",
									"        \"created_at\",",
									"        \"status_updated_at\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'user_token',",
									"\t'roles': ['ADMIN'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"left_victory\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/event/33333333-3333-3333-3333-333333333333",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"event",
								"33333333-3333-3333-3333-333333333333"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/event/{event_token} 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'user_token',",
									"\t'roles': ['USER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"left_victory\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/event/33333333-3333-3333-3333-333333333333",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"event",
								"33333333-3333-3333-3333-333333333333"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/event/{event_token} 422 Unpocessable entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 422 = Unprocessable Entity",
									" */",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test object keys\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"detail\");",
									"    v = jsonData.detail[0]",
									"    pm.expect(v).to.have.property(\"loc\");",
									"    pm.expect(v).to.have.property(\"msg\");",
									"    pm.expect(v).to.have.property(\"type\");",
									"});",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    v = jsonData.detail[0]",
									"    pm.expect(v.msg).to.a(\"string\");",
									"    pm.expect(v.msg).to.eql(\"Input should be 'scheduled','right_victory' or 'left_victory'\");",
									"});",
									"/**",
									" * ajv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"properties\": {",
									"                    \"loc\": {",
									"                        \"type\": \"array\"",
									"                    },",
									"                    \"msg\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"type\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"ctx\": {",
									"                        \"type\": \"object\"",
									"                    }",
									"                },",
									"                \"required\": [",
									"                    \"loc\",",
									"                    \"msg\",",
									"                    \"type\",",
									"                    \"input\",",
									"                    \"ctx\"",
									"                ],",
									"                \"additionalProperties\": true",
									"            } ",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'user_token',",
									"\t'roles': ['ADMIN'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"smt\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/event/33333333-3333-3333-3333-333333333333",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"event",
								"33333333-3333-3333-3333-333333333333"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "/v1/events 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(\"items\", \"total_count\", \"links\")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.a(\"array\");",
									"    pm.expect(jsonData.total_count).to.a(\"number\"); ",
									"    pm.expect(jsonData.links).to.a(\"object\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"items\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\"",
									"            },",
									"        },",
									"        \"total_count\":{",
									"            \"type\": \"number\"",
									"        },",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"first\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"last\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"previous\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"next\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"            },",
									"            \"required\": [",
									"                \"first\",",
									"                \"last\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },    ",
									"    \"required\": [",
									"        \"items\",",
									"        \"total_count\",",
									"        \"links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['ADMIN'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/events",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/events 200 OK with pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(\"items\", \"total_count\", \"links\")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.a(\"array\");",
									"    pm.expect(jsonData.items.length).to.be.equal(1);",
									"    pm.expect(jsonData.total_count).to.a(\"number\"); ",
									"    pm.expect(jsonData.links).to.a(\"object\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"items\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\"",
									"            },",
									"        },",
									"        \"total_count\":{",
									"            \"type\": \"number\"",
									"        },",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"first\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"last\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"previous\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"next\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"            },",
									"            \"required\": [",
									"                \"first\",",
									"                \"last\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },    ",
									"    \"required\": [",
									"        \"items\",",
									"        \"total_count\",",
									"        \"links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['ADMIN'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/events?page=1&limit=1",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"events"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/events 200 OK with only active False",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(\"items\", \"total_count\", \"links\")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.a(\"array\");",
									"    pm.expect(jsonData.items.length).to.be.equal(4);",
									"    pm.expect(jsonData.total_count).to.a(\"number\"); ",
									"    pm.expect(jsonData.links).to.a(\"object\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"items\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\"",
									"            },",
									"        },",
									"        \"total_count\":{",
									"            \"type\": \"number\"",
									"        },",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"first\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"last\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"previous\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"next\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"            },",
									"            \"required\": [",
									"                \"first\",",
									"                \"last\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },    ",
									"    \"required\": [",
									"        \"items\",",
									"        \"total_count\",",
									"        \"links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['ADMIN'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/events?only_active=False",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"events"
							],
							"query": [
								{
									"key": "only_active",
									"value": "False"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
